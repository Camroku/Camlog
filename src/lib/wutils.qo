__export__ = [
    "htmlPage",
    "error",
    "redirect",
    "plainText",
    "html.escape",
    "url.unquote",
    "url.unquote_plus"
];

func htmlPage(page)
{
    print(%"Content-Type: text/html\n\n");
    print(page);
};

func error(errorcode)
{
    include qcf;
    qcf.new("config.qcf", &config);
    config.author = config.get("author");
    header = format(read("views/header.html"));
    print(%"Content-Type: text/html\nStatus: $errorcode\n\n");
    print(format(read("views/error.html")));
};

func redirect(loc)
{
    print(%"Status: 302 Found\nLocation: $loc\n\n");
};

func plainText(page)
{
    print(%"Content-Type: text/plain\n\n");
    print(page);
};

func html.escape(text)
{
    text = replace(text, %"&", "&amp;");
    text = replace(text, %"<", "&lt;");
    text = replace(text, %">", "&gt;");
    text = replace(text, %"\"", "&quot;");
    text = replace(text, %"'", "&#39;");
    return text;
};

func url.unquote(text)
{
    text = split(text, "%");
    out = text[0];
    foreach &part in text[1:]
    {
        if (len(part) > 1)
        {
            hex = toInt("0x" + part[0] + part[1]);
            out += chr(hex);
            out += join(part[2:], "");
        };
    };
    return out;
};

func url.unquote_plus(text)
{
    text = replace(text, %"+", " ");
    text = split(text, "%");
    out = text[0];
    foreach &part in text[1:]
    {
        if (len(part) > 1)
        {
            hex = toInt("0x" + part[0] + part[1]);
            out += chr(hex);
            out += join(part[2:], "");
        };
    };
    return out;
};
